@page "/tools/merge"
@rendermode InteractiveServer

@using BlazorSortableList
@using Microsoft.AspNetCore.Http

@inject NavigationManager Navigation
@inject ICurrentUserService CurrentUserService
@inject IHttpClientInteractorService HttpClientInteractorService
@inject IFileContentCreatingService FileContentCreatingService
@inject IApiResponseReaderService ApiResponseReaderService
@inject IUiMessageService MessageService
@inject IEndpointUrlsService EndpointUrlsService

<PageTitle>Merge</PageTitle>

<h2 class="text-center my-4 bold-title">
    Merge PDF
</h2>
<h4 class="text-center mb-4 gray-subtitle">
    Upload multiple PDF files to merge them into one
</h4>

<div class="container my-4">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group mb-4">
                <div class="p-2 file-upload-container">
                    <InputFile class="form-control-file"
                               accept=".pdf"
                               OnChange="HandleFilesSelected"
                               multiple />
                </div>
            </div>
            <div class="list-group mb-4 file-list-container">
                <SortableList Id="@FilesListId" GroupModel="@filesGroup" Context="item">
                    <SortableItemTemplate>
                        <div class="cursor-pointer d-flex align-items-center sortable-file-list-item px-2 py-2 ">
                            <i class="fas fa-ellipsis-v text-secondary"></i>
                            <i class="fas fa-ellipsis-v text-secondary"></i>
                            <span class="mx-2">@item.Name</span>
                        </div>
                    </SortableItemTemplate>
                </SortableList>
            </div>
            <button class="btn btn-primary" @onclick="ExecuteToolAsync">
                Merge PDFs
            </button>
        </div>
    </div>
</div>

<link rel="stylesheet" href="css/components/files.css" />
<link rel="stylesheet" href="css/components/title.css" />

@code
{
    private const string FilesListId = "files-list";

    private List<IBrowserFile> files = [];
    private SingleSortableListGroup<IBrowserFile>? filesGroup;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        filesGroup = new(FilesListId, new SortableListModel<IBrowserFile>(files));
    }

    private void HandleFilesSelected(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> selectedFiles = e.GetMultipleFiles();
        files.AddRange(selectedFiles);
    }

    private async Task ExecuteToolAsync()
    {
        MultipartFormDataContent content = await FileContentCreatingService
            .CreateMultipartFormDataContentAsync(files)
            .ConfigureAwait(false);

        Action<HttpResponseMessage> successHandler = async responseMessage =>
        {
            SaveFilesResponse? response = await ApiResponseReaderService
                .ReadAsync<SaveFilesResponse>(responseMessage)
                .ConfigureAwait(false);

            if (response is not null)
            {
                Navigation.NavigateTo($"/waiting/{response.OutputFileName}", false);
            }
            else
            {
                await MessageService
                    .ShowAlertAsync("Something went wrong...")
                    .ConfigureAwait(false);
            }
        };

        await HttpClientInteractorService
            .PostAsync(EndpointUrlsService.Merge, content, successHandler)
            .ConfigureAwait(false);
    }
}
