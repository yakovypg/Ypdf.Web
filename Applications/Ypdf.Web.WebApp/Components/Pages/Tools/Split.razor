@page "/tools/split"
@rendermode InteractiveServer

<PageTitle>Split</PageTitle>

<h2 class="text-center my-4 bold-title">
    Split PDF
</h2>
<h4 class="text-center mb-4 gray-subtitle">
    Upload a PDF file and specify the page ranges to split it
</h4>

<div class="container my-4">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group mb-4">
                <label for="fileUpload" class="font-weight-bold">Upload PDF File:</label>
                <div class="border p-2" style="border: 2px solid #007bff; border-radius: 5px;">
                    <input type="file" id="fileUpload" class="form-control-file" accept=".pdf" />
                </div>
            </div>
            <div class="form-group mb-4">
                <label for="pageRanges" class="font-weight-bold">Page Ranges (e.g., 1-3, 5, 7-9):</label>
                <input type="text" id="pageRanges" class="form-control" placeholder="Enter page ranges" />
                <small class="form-text text-muted">Separate ranges with commas. Example: 1-3, 5, 7-9</small>
            </div>
            <button id="splitButton" class="btn btn-primary">Split PDF</button>
            <div id="errorMessage" class="text-danger mt-3"></div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="titles.css" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        let totalPages = 0;

        // Handle file upload
        $('#fileUpload').on('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const fileReader = new FileReader();
                fileReader.onload = function () {
                    const typedarray = new Uint8Array(this.result);
                    pdfjsLib.getDocument(typedarray).promise.then(function (pdf) {
                        totalPages = pdf.numPages; // Получаем количество страниц
                        $('#errorMessage').text(''); // Очищаем предыдущие сообщения об ошибках
                        console.log('Total pages: ' + totalPages); // Для отладки
                    }).catch(function (error) {
                        $('#errorMessage').text('Error loading PDF: ' + error.message);
                    });
                };
                fileReader.readAsArrayBuffer(file); // Читаем файл как ArrayBuffer
            }
        });

        // Handle split button click
        $('#splitButton').on('click', function () {
            const ranges = $('#pageRanges').val().trim();
            const error = validateRanges(ranges);
            if (error) {
                $('#errorMessage').text(error);
            } else {
                $('#errorMessage').text('');
                // Здесь вы бы обычно отправили файл и диапазоны на сервер для обработки
                alert('PDF will be split for ranges: ' + ranges);
            }
        });

        // Validate page ranges
        function validateRanges(ranges) {
            const rangeArray = ranges.split(',').map(r => r.trim());
            const parsedRanges = [];

            for (let range of rangeArray) {
                const match = range.match(/^(\d+)(-(\d+))?$/);
                if (!match) {
                    return 'Invalid range format: ' + range;
                }
                const start = parseInt(match[1]);
                const end = match[3] ? parseInt(match[3]) : start;

                if (start < 1 || end < 1) {
                    return 'Page numbers must be positive.';
                }
                if (start > end) {
                    return 'Start of range cannot be greater than end: ' + range;
                }
                if (end > totalPages) {
                    return 'Page number exceeds total pages (' + totalPages + '): ' + range;
                }

                // Проверка на уникальность и пересечение диапазонов
                for (let existingRange of parsedRanges) {
                    if ((start >= existingRange.start && start <= existingRange.end) ||
                        (end >= existingRange.start && end <= existingRange.end) ||
                        (start <= existingRange.start && end >= existingRange.end)) {
                        return 'Overlapping ranges detected: ' + range + ' overlaps with ' + existingRange.start + '-' + existingRange.end;
                    }
                }

                // Добавляем диапазон в массив
                parsedRanges.push({ start: start, end: end });
            }
            return null; // Нет ошибок
        }
    });
</script>
